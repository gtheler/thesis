PROBLEM neutron_diffusion 1D
DEFAULT_ARGUMENT_VALUE 1 i

# leemos la malla según el argumento sea i o ii
READ_MESH two-zone-slab-$1.msh

# este archivo ab.geo tiene información geométrica y es creado
# por el script en bash que nos llama
INCLUDE ab.geo

# XSs para el material puro A de x=0 to x=a
D1_A = 0.5
Sigma_a1_A = 0.014
nuSigma_f1_A = 0.010

# XSs para el material puro B de x=a to x=b
D1_B = 1.2
Sigma_a1_B = 0.010
nuSigma_f1_B = 0.014

# psedo-material AB usado solamente si $1 es uniform
a_left  = floor(a/lc)*lc;
xi = (a - a_left)/lc
Sigma_tr_A = 1/(3*D1_A)
Sigma_tr_B = 1/(3*D1_B)
Sigma_tr_AB = xi*Sigma_tr_A + (1-xi)*Sigma_tr_B
D1_AB = 1/(3*Sigma_tr_AB)
Sigma_a1_AB = xi * Sigma_a1_A + (1-xi)*Sigma_a1_B
nuSigma_f1_AB = xi * nuSigma_f1_A + (1-xi)*nuSigma_f1_B

# condiciones de contorno de flujo nulo
BC left  phi1=0
BC right phi1=0

SOLVE_PROBLEM

# calculamos el keff analítico como la raíz de F1(k)-F2(k)
F1(k) = sqrt(D1_A*(Sigma_a1_A-nuSigma_f1_A/k)) * tan(sqrt((1/D1_B)*(nuSigma_f1_B/k-Sigma_a1_B))*(a-b))
F2(k) = sqrt(D1_B*(nuSigma_f1_B/k-Sigma_a1_B)) * tanh(sqrt((1/D1_A)*(Sigma_a1_A-nuSigma_f1_A/k))*b)
k = root(F1(k)-F2(k), k, 1, 1.2)

# el flujo analítico en función de x (no es usado en este problema)
B_A = sqrt((Sigma_a1_A - nuSigma_f1_A/k)/D1_A)
fluxA(x) = sinh(B_A*x)

B_B = sqrt((nuSigma_f1_B/k - Sigma_a1_B)/D1_B)
fluxB(x)= sinh(B_A*b)/sin(B_B*(a-b)) * sin(B_B*(a-x))

# factor de normalización
f = a/(integral(fluxA(x), x, 0, b) + integral(fluxB(x), x, b, a))
flux(x) := f * if(x < b, fluxA(x), fluxB(x))

# esribimos keff (numerico) y k (analitico) vs. a
PRINT a keff k keff-k

# si quisiéramos, con estas líneas podríamos comparar los flujos
# PRINT_FUNCTION flux MIN 0 MAX a STEP a/1000 FILE_PATH two-zone-analytical.dat
# PRINT_FUNCTION phi1 phi1(x)-flux(x)         FILE_PATH two-zone-numerical.dat
